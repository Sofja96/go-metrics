// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/proto/metrics_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	"github.com/Sofja96/go-metrics.git/internal/proto"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMetricsClient is a mock of MetricsClient interface.
type MockMetricsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsClientMockRecorder
}

// MockMetricsClientMockRecorder is the mock recorder for MockMetricsClient.
type MockMetricsClientMockRecorder struct {
	mock *MockMetricsClient
}

// NewMockMetricsClient creates a new mock instance.
func NewMockMetricsClient(ctrl *gomock.Controller) *MockMetricsClient {
	mock := &MockMetricsClient{ctrl: ctrl}
	mock.recorder = &MockMetricsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsClient) EXPECT() *MockMetricsClientMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockMetricsClient) GetAllMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.GetAllMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllMetrics", varargs...)
	ret0, _ := ret[0].(*proto.GetAllMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricsClientMockRecorder) GetAllMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricsClient)(nil).GetAllMetrics), varargs...)
}

// GetMetric mocks base method.
func (m *MockMetricsClient) GetMetric(ctx context.Context, in *proto.GetMetricRequest, opts ...grpc.CallOption) (*proto.GetMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetric", varargs...)
	ret0, _ := ret[0].(*proto.GetMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricsClientMockRecorder) GetMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricsClient)(nil).GetMetric), varargs...)
}

// UpdateMetric mocks base method.
func (m *MockMetricsClient) UpdateMetric(ctx context.Context, in *proto.UpdateMetricRequest, opts ...grpc.CallOption) (*proto.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetric", varargs...)
	ret0, _ := ret[0].(*proto.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricsClientMockRecorder) UpdateMetric(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricsClient)(nil).UpdateMetric), varargs...)
}

// UpdateMetrics mocks base method.
func (m *MockMetricsClient) UpdateMetrics(ctx context.Context, in *proto.UpdateMetricsRequest, opts ...grpc.CallOption) (*proto.UpdateMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMetrics", varargs...)
	ret0, _ := ret[0].(*proto.UpdateMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricsClientMockRecorder) UpdateMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricsClient)(nil).UpdateMetrics), varargs...)
}

// MockMetricsServer is a mock of MetricsServer interface.
type MockMetricsServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServerMockRecorder
}

// MockMetricsServerMockRecorder is the mock recorder for MockMetricsServer.
type MockMetricsServerMockRecorder struct {
	mock *MockMetricsServer
}

// NewMockMetricsServer creates a new mock instance.
func NewMockMetricsServer(ctrl *gomock.Controller) *MockMetricsServer {
	mock := &MockMetricsServer{ctrl: ctrl}
	mock.recorder = &MockMetricsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServer) EXPECT() *MockMetricsServerMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockMetricsServer) GetAllMetrics(arg0 context.Context, arg1 *emptypb.Empty) (*proto.GetAllMetricsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetAllMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricsServerMockRecorder) GetAllMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricsServer)(nil).GetAllMetrics), arg0, arg1)
}

// GetMetric mocks base method.
func (m *MockMetricsServer) GetMetric(arg0 context.Context, arg1 *proto.GetMetricRequest) (*proto.GetMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricsServerMockRecorder) GetMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricsServer)(nil).GetMetric), arg0, arg1)
}

// UpdateMetric mocks base method.
func (m *MockMetricsServer) UpdateMetric(arg0 context.Context, arg1 *proto.UpdateMetricRequest) (*proto.UpdateMetricResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricsServerMockRecorder) UpdateMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricsServer)(nil).UpdateMetric), arg0, arg1)
}

// UpdateMetrics mocks base method.
func (m *MockMetricsServer) UpdateMetrics(arg0 context.Context, arg1 *proto.UpdateMetricsRequest) (*proto.UpdateMetricsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricsServerMockRecorder) UpdateMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricsServer)(nil).UpdateMetrics), arg0, arg1)
}

// mustEmbedUnimplementedMetricsServer mocks base method.
func (m *MockMetricsServer) mustEmbedUnimplementedMetricsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsServer")
}

// mustEmbedUnimplementedMetricsServer indicates an expected call of mustEmbedUnimplementedMetricsServer.
func (mr *MockMetricsServerMockRecorder) mustEmbedUnimplementedMetricsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsServer", reflect.TypeOf((*MockMetricsServer)(nil).mustEmbedUnimplementedMetricsServer))
}

// MockUnsafeMetricsServer is a mock of UnsafeMetricsServer interface.
type MockUnsafeMetricsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricsServerMockRecorder
}

// MockUnsafeMetricsServerMockRecorder is the mock recorder for MockUnsafeMetricsServer.
type MockUnsafeMetricsServerMockRecorder struct {
	mock *MockUnsafeMetricsServer
}

// NewMockUnsafeMetricsServer creates a new mock instance.
func NewMockUnsafeMetricsServer(ctrl *gomock.Controller) *MockUnsafeMetricsServer {
	mock := &MockUnsafeMetricsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetricsServer) EXPECT() *MockUnsafeMetricsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricsServer mocks base method.
func (m *MockUnsafeMetricsServer) mustEmbedUnimplementedMetricsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsServer")
}

// mustEmbedUnimplementedMetricsServer indicates an expected call of mustEmbedUnimplementedMetricsServer.
func (mr *MockUnsafeMetricsServerMockRecorder) mustEmbedUnimplementedMetricsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsServer", reflect.TypeOf((*MockUnsafeMetricsServer)(nil).mustEmbedUnimplementedMetricsServer))
}
