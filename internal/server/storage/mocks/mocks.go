// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/Sofja96/go-metrics.git/internal/models"
	storage "github.com/Sofja96/go-metrics.git/internal/server/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BatchUpdate mocks base method.
func (m *MockStorage) BatchUpdate(metrics []models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdate", metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdate indicates an expected call of BatchUpdate.
func (mr *MockStorageMockRecorder) BatchUpdate(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdate", reflect.TypeOf((*MockStorage)(nil).BatchUpdate), metrics)
}

// GetAllCounters mocks base method.
func (m *MockStorage) GetAllCounters() ([]storage.CounterMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].([]storage.CounterMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockStorageMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockStorage)(nil).GetAllCounters))
}

// GetAllGauges mocks base method.
func (m *MockStorage) GetAllGauges() ([]storage.GaugeMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].([]storage.GaugeMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockStorageMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockStorage)(nil).GetAllGauges))
}

// GetCounterValue mocks base method.
func (m *MockStorage) GetCounterValue(id string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterValue", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounterValue indicates an expected call of GetCounterValue.
func (mr *MockStorageMockRecorder) GetCounterValue(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterValue", reflect.TypeOf((*MockStorage)(nil).GetCounterValue), id)
}

// GetGaugeValue mocks base method.
func (m *MockStorage) GetGaugeValue(id string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeValue", id)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGaugeValue indicates an expected call of GetGaugeValue.
func (mr *MockStorageMockRecorder) GetGaugeValue(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeValue", reflect.TypeOf((*MockStorage)(nil).GetGaugeValue), id)
}

// Ping mocks base method.
func (m *MockStorage) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping))
}

// UpdateCounter mocks base method.
func (m *MockStorage) UpdateCounter(name string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockStorageMockRecorder) UpdateCounter(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockStorage)(nil).UpdateCounter), name, value)
}

// UpdateGauge mocks base method.
func (m *MockStorage) UpdateGauge(name string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockStorageMockRecorder) UpdateGauge(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockStorage)(nil).UpdateGauge), name, value)
}
